// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Employee.proto

#ifndef PROTOBUF_Employee_2eproto_INCLUDED
#define PROTOBUF_Employee_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Employee_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEmployeeImpl();
void InitDefaultsEmployee();
void InitDefaultshand_FlexResistorImpl();
void InitDefaultshand_FlexResistor();
void InitDefaultshandImpl();
void InitDefaultshand();
inline void InitDefaults() {
  InitDefaultsEmployee();
  InitDefaultshand_FlexResistor();
  InitDefaultshand();
}
}  // namespace protobuf_Employee_2eproto
namespace demo {
class Employee;
class EmployeeDefaultTypeInternal;
extern EmployeeDefaultTypeInternal _Employee_default_instance_;
class hand;
class handDefaultTypeInternal;
extern handDefaultTypeInternal _hand_default_instance_;
class hand_FlexResistor;
class hand_FlexResistorDefaultTypeInternal;
extern hand_FlexResistorDefaultTypeInternal _hand_FlexResistor_default_instance_;
}  // namespace demo
namespace google {
namespace protobuf {
template<> ::demo::Employee* Arena::Create< ::demo::Employee>(Arena*);
template<> ::demo::hand* Arena::Create< ::demo::hand>(Arena*);
template<> ::demo::hand_FlexResistor* Arena::Create< ::demo::hand_FlexResistor>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace demo {

// ===================================================================

class Employee : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:demo.Employee) */ {
 public:
  Employee();
  virtual ~Employee();

  Employee(const Employee& from);

  inline Employee& operator=(const Employee& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Employee(Employee&& from) noexcept
    : Employee() {
    *this = ::std::move(from);
  }

  inline Employee& operator=(Employee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Employee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Employee* internal_default_instance() {
    return reinterpret_cast<const Employee*>(
               &_Employee_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Employee* other);
  friend void swap(Employee& a, Employee& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Employee* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Employee>(NULL);
  }

  Employee* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Employee>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Employee& from);
  void MergeFrom(const Employee& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Employee* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email = 3;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:demo.Employee)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_Employee_2eproto::TableStruct;
  friend void ::protobuf_Employee_2eproto::InitDefaultsEmployeeImpl();
};
// -------------------------------------------------------------------

class hand_FlexResistor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:demo.hand.FlexResistor) */ {
 public:
  hand_FlexResistor();
  virtual ~hand_FlexResistor();

  hand_FlexResistor(const hand_FlexResistor& from);

  inline hand_FlexResistor& operator=(const hand_FlexResistor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  hand_FlexResistor(hand_FlexResistor&& from) noexcept
    : hand_FlexResistor() {
    *this = ::std::move(from);
  }

  inline hand_FlexResistor& operator=(hand_FlexResistor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const hand_FlexResistor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const hand_FlexResistor* internal_default_instance() {
    return reinterpret_cast<const hand_FlexResistor*>(
               &_hand_FlexResistor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(hand_FlexResistor* other);
  friend void swap(hand_FlexResistor& a, hand_FlexResistor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline hand_FlexResistor* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<hand_FlexResistor>(NULL);
  }

  hand_FlexResistor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<hand_FlexResistor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const hand_FlexResistor& from);
  void MergeFrom(const hand_FlexResistor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(hand_FlexResistor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 1 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:demo.hand.FlexResistor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_Employee_2eproto::TableStruct;
  friend void ::protobuf_Employee_2eproto::InitDefaultshand_FlexResistorImpl();
};
// -------------------------------------------------------------------

class hand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:demo.hand) */ {
 public:
  hand();
  virtual ~hand();

  hand(const hand& from);

  inline hand& operator=(const hand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  hand(hand&& from) noexcept
    : hand() {
    *this = ::std::move(from);
  }

  inline hand& operator=(hand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const hand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const hand* internal_default_instance() {
    return reinterpret_cast<const hand*>(
               &_hand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(hand* other);
  friend void swap(hand& a, hand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline hand* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<hand>(NULL);
  }

  hand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<hand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const hand& from);
  void MergeFrom(const hand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(hand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef hand_FlexResistor FlexResistor;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:demo.hand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_Employee_2eproto::TableStruct;
  friend void ::protobuf_Employee_2eproto::InitDefaultshandImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Employee

// string name = 1;
inline void Employee::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Employee::name() const {
  // @@protoc_insertion_point(field_get:demo.Employee.name)
  return name_.GetNoArena();
}
inline void Employee::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.Employee.name)
}
#if LANG_CXX11
inline void Employee::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.Employee.name)
}
#endif
inline void Employee::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.Employee.name)
}
inline void Employee::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.Employee.name)
}
inline ::std::string* Employee::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.Employee.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Employee::release_name() {
  // @@protoc_insertion_point(field_release:demo.Employee.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Employee::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:demo.Employee.name)
}

// int32 id = 2;
inline void Employee::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Employee::id() const {
  // @@protoc_insertion_point(field_get:demo.Employee.id)
  return id_;
}
inline void Employee::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:demo.Employee.id)
}

// string email = 3;
inline void Employee::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Employee::email() const {
  // @@protoc_insertion_point(field_get:demo.Employee.email)
  return email_.GetNoArena();
}
inline void Employee::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.Employee.email)
}
#if LANG_CXX11
inline void Employee::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.Employee.email)
}
#endif
inline void Employee::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.Employee.email)
}
inline void Employee::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.Employee.email)
}
inline ::std::string* Employee::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:demo.Employee.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Employee::release_email() {
  // @@protoc_insertion_point(field_release:demo.Employee.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Employee::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:demo.Employee.email)
}

// -------------------------------------------------------------------

// hand_FlexResistor

// repeated float data = 1 [packed = true];
inline int hand_FlexResistor::data_size() const {
  return data_.size();
}
inline void hand_FlexResistor::clear_data() {
  data_.Clear();
}
inline float hand_FlexResistor::data(int index) const {
  // @@protoc_insertion_point(field_get:demo.hand.FlexResistor.data)
  return data_.Get(index);
}
inline void hand_FlexResistor::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.hand.FlexResistor.data)
}
inline void hand_FlexResistor::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:demo.hand.FlexResistor.data)
}
inline const ::google::protobuf::RepeatedField< float >&
hand_FlexResistor::data() const {
  // @@protoc_insertion_point(field_list:demo.hand.FlexResistor.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
hand_FlexResistor::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:demo.hand.FlexResistor.data)
  return &data_;
}

// -------------------------------------------------------------------

// hand

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace demo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Employee_2eproto_INCLUDED
