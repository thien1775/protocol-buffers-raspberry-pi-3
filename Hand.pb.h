// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hand.proto

#ifndef PROTOBUF_Hand_2eproto_INCLUDED
#define PROTOBUF_Hand_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Hand_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHandImpl();
void InitDefaultsHand();
inline void InitDefaults() {
  InitDefaultsHand();
}
}  // namespace protobuf_Hand_2eproto
namespace demo {
class Hand;
class HandDefaultTypeInternal;
extern HandDefaultTypeInternal _Hand_default_instance_;
}  // namespace demo
namespace google {
namespace protobuf {
template<> ::demo::Hand* Arena::Create< ::demo::Hand>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace demo {

// ===================================================================

class Hand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:demo.Hand) */ {
 public:
  Hand();
  virtual ~Hand();

  Hand(const Hand& from);

  inline Hand& operator=(const Hand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hand(Hand&& from) noexcept
    : Hand() {
    *this = ::std::move(from);
  }

  inline Hand& operator=(Hand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Hand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hand* internal_default_instance() {
    return reinterpret_cast<const Hand*>(
               &_Hand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Hand* other);
  friend void swap(Hand& a, Hand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hand* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Hand>(NULL);
  }

  Hand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Hand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Hand& from);
  void MergeFrom(const Hand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Hand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float flex_resistor = 1;
  int flex_resistor_size() const;
  void clear_flex_resistor();
  static const int kFlexResistorFieldNumber = 1;
  float flex_resistor(int index) const;
  void set_flex_resistor(int index, float value);
  void add_flex_resistor(float value);
  const ::google::protobuf::RepeatedField< float >&
      flex_resistor() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_flex_resistor();

  // @@protoc_insertion_point(class_scope:demo.Hand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > flex_resistor_;
  mutable int _flex_resistor_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_Hand_2eproto::TableStruct;
  friend void ::protobuf_Hand_2eproto::InitDefaultsHandImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Hand

// repeated float flex_resistor = 1;
inline int Hand::flex_resistor_size() const {
  return flex_resistor_.size();
}
inline void Hand::clear_flex_resistor() {
  flex_resistor_.Clear();
}
inline float Hand::flex_resistor(int index) const {
  // @@protoc_insertion_point(field_get:demo.Hand.flex_resistor)
  return flex_resistor_.Get(index);
}
inline void Hand::set_flex_resistor(int index, float value) {
  flex_resistor_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.Hand.flex_resistor)
}
inline void Hand::add_flex_resistor(float value) {
  flex_resistor_.Add(value);
  // @@protoc_insertion_point(field_add:demo.Hand.flex_resistor)
}
inline const ::google::protobuf::RepeatedField< float >&
Hand::flex_resistor() const {
  // @@protoc_insertion_point(field_list:demo.Hand.flex_resistor)
  return flex_resistor_;
}
inline ::google::protobuf::RepeatedField< float >*
Hand::mutable_flex_resistor() {
  // @@protoc_insertion_point(field_mutable_list:demo.Hand.flex_resistor)
  return &flex_resistor_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace demo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Hand_2eproto_INCLUDED
